#include <LiquidCrystal.h>
#include <Stepper.h>

LiquidCrystal lcd(12, 7, 6, 5, 4, 3);  // Initialize the LCD library with the pins you are using

const int buttonHour = A0; // Pin for the button to adjust hours
const int buttonMinute = A1; // Pin for the button to adjust minutes
const int buttonSecond = A2; // Pin for the button to adjust seconds
const int buttonReset = A3; // Pin for the button to reset the timer

int hours = 0;
int minutes = 0;
int seconds = 0;

int initialHours = 0; // Store initial countdown hours
int initialMinutes = 0; // Store initial countdown minutes
int initialSeconds = 0; // Store initial countdown seconds

bool startPressed = false; // Flag to track if the start button has been pressed
bool timerFinished = false; // Flag to indicate if the timer has finished

// Pin definitions
const int buttonPin = 2;
const int ledPin = 13;
const int motorPins[] = {8, 9, 10, 11};

// Define the number of steps per revolution
const int stepsPerRevolution = 200;

// Initialize the stepper motor object with the number of steps and the pins it's connected to
Stepper myStepper(stepsPerRevolution, motorPins[0], motorPins[1], motorPins[2], motorPins[3]);

// Variables to track button state and timing
bool buttonState = false;
bool blinkingLED = false; // Changed to false initially
unsigned long lastButtonPressTime = 0;

bool motorRan = false; // Flag to track if the motor has run

void setup() {
  lcd.begin(16, 2);  // Set up the LCD's number of columns and rows
  pinMode(buttonHour, INPUT_PULLUP); // Set button pins as input with pullup resistors
  pinMode(buttonMinute, INPUT_PULLUP);
  pinMode(buttonSecond, INPUT_PULLUP);
  pinMode(buttonReset, INPUT_PULLUP);
  pinMode(ledPin, OUTPUT); // Initialize LED pin
  digitalWrite(ledPin, LOW); // Turn off LED initially
  myStepper.setSpeed(60); // Set the speed of the stepper motor
  
  displayTime();
}

void loop() {
  // Check buttons
  if (digitalRead(buttonHour) == LOW) {
    hours++;
    if (hours >= 24) {
      hours = 0;
    }
    displayTime();
    delay(250); // debounce delay
  }
  if (digitalRead(buttonMinute) == LOW) {
    minutes++;
    if (minutes >= 60) {
      minutes = 0;
    }
    displayTime();
    delay(250); // debounce delay
  }
  if (digitalRead(buttonSecond) == LOW) {
    seconds++;
    if (seconds >= 60) {
      seconds = 0;
    }
    displayTime();
    delay(250); // debounce delay
  }
  if (digitalRead(buttonReset) == LOW) {
    // Check if the start button has been pressed
    if (startPressed) {
      // Reset the timer to initial countdown time
      hours = initialHours;
      minutes = initialMinutes;
      seconds = initialSeconds;
      displayTime();
      startPressed = false; // Reset the start button flag
      motorRan = false; // Reset the motor run flag
      digitalWrite(ledPin, LOW); // Turn off LED
      blinkingLED = false; // Disable blinking
    } else {
      // Start button pressed for the first time
      startPressed = true;
      
      // Store initial countdown time
      initialHours = hours;
      initialMinutes = minutes;
      initialSeconds = seconds;
    }
    delay(250); // debounce delay
  }

  // Countdown logic
  if (startPressed) {
    if (hours == 0 && minutes == 0 && seconds == 0) {
      lcd.clear(); // Clear the LCD when timer finishes
      lcd.noDisplay(); // Turn off LCD temporarily
      // Turn on LED and stop motor when timer finishes
      digitalWrite(ledPin, HIGH);
      blinkingLED = true; // Start blinking LED
    } else {
      delay(1000); // One second delay
      if (seconds == 0) {
        if (minutes > 0) {
          minutes--;
          seconds = 59;
        } else if (hours > 0) {
          hours--;
          minutes = 59;
          seconds = 59;
        }
      } else {
        seconds--;
      }
      displayTime();
    }
  }

  // Blink LED logic
  if (blinkingLED) {
    digitalWrite(ledPin, !digitalRead(ledPin)); // Toggle LED state
    delay(500);
  }

  // Check if the button is pressed
  if (digitalRead(buttonPin) == LOW && !buttonState) {
    // Button is pressed and was not pressed previously
    buttonState = true;

    // Stop LED blinking
    blinkingLED = false;

    // Run stepper motor for 1/3 of a full rotation
    runStepperMotor();

    // Update last button press time
    lastButtonPressTime = millis();
    motorRan = true; // Set motor run flag
  }

  // Check if 30 seconds have passed since the last button press
  if (millis() - lastButtonPressTime >= 30000) {
    // 30 seconds have passed, resume LED blinking
    blinkingLED = true;
    buttonState = false; // Reset button state
  }

  // Check if the motor has run
  if (motorRan) {
    // Turn on LED
    digitalWrite(ledPin, HIGH);
    // Turn on LCD
    lcd.display();
    // Reset countdown timer to initial time
    hours = initialHours;
    minutes = initialMinutes;
    seconds = initialSeconds;
    displayTime();
    motorRan = false; // Reset motor run flag
  }

}

void runStepperMotor() {
  
  // Rotate the motor for 1/3 of a full rotation
  myStepper.step(stepsPerRevolution / 3);

  // Optional delay after motor movement
  delay(500); // Adjust as needed
  // Rotate the motor for 1/3 of a full rotation
  myStepper.step(stepsPerRevolution / 3);

  // Optional delay after motor movement
  delay(500); // Adjust as needed
  // Rotate the motor for 1/3 of a full rotation
  myStepper.step(stepsPerRevolution / 3);

  // Optional delay after motor movement
  delay(500); // Adjust as needed
  // Rotate the motor for 1/3 of a full rotation
  myStepper.step(stepsPerRevolution / 3);

  // Optional delay after motor movement
  delay(500); // Adjust as needed
}

void displayTime() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Time: ");
  lcd.print(hours);
  lcd.print(":");
  if (minutes < 10) {
    lcd.print("0");
  }
  lcd.print(minutes);
  lcd.print(":");
  if (seconds < 10) {
    lcd.print("0");
  }
  lcd.print(seconds);
}
